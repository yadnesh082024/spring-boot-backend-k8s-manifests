name: CD Pipeline

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    steps:
      # Step to check out the repository code.
      # This step uses the actions/checkout action to clone the repository.
      - uses: actions/checkout@v4

      # Step to log in with your Azure credentials.
      # This step uses the azure/login action to authenticate with Azure.
      - name: Azure Login action
        uses: azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # Step to set up kubelogin for non-interactive login.
      # This step uses the azure/use-kubelogin action to configure kubelogin.
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1.2
        with:
          kubelogin-version: 'v0.1.4'

      # Step to retrieve your Azure Kubernetes Service cluster's kubeconfig file.
      # This step uses the azure/aks-set-context action to set the Kubernetes context.
      - name: Get K8s context
        uses: azure/aks-set-context@v4.0.1
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Step to set up kubectl, the Kubernetes command-line tool.
      # This step uses the azure/setup-kubectl action to install kubectl.
      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v4.0.0
        with:
          version: 'latest'

      # Step to set up Helm, the package manager for Kubernetes.
      # This step uses the azure/setup-helm action to install Helm.
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: 'latest'

      # Step to install the Argo Rollouts CLI.
      # This step downloads the latest version of the Argo Rollouts CLI, makes it executable, and moves it to /usr/local/bin.
      - name: Set up argo-rollouts
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x ./kubectl-argo-rollouts-linux-amd64
          sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
          # Verify the installation of Argo Rollouts CLI
          kubectl argo rollouts version

      # Step to set the Kubernetes namespace.
      # This step sets the current context to the specified namespace.
      - name: Set Kubernetes Namespace
        run: kubectl config set-context --current --namespace=spring-app

      - name: Update /etc/hosts
        run: |
          echo "4.213.205.81 backend-spring-app.com" | sudo tee -a /etc/hosts
          cat /etc/hosts

      - name: Wait for changes to apply
        run: sleep 10

      - name: Verify /etc/hosts update
        run: |
          nslookup backend-spring-app.com

      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Deploy to Spring Boot
        run: |
          helm upgrade --install backend-spring-app ./spring-boot-backend-helm-chart --create-namespace --namespace spring-app --values=./spring-boot-backend-helm-chart/values.yaml  --force

      - name: Wait for Analysis
        run: |
          sleep 60

      - name: Test endpoint with curl and capture logs
        run: |
          curl -H "Accept: application/json" http://backend-spring-app.com/spring-app/ -o curl_output.txt
          cat curl_output.txt
          curl -H "Accept: application/json" http://backend-spring-app.com/spring-app/resource-created -o curl_output_1.txt
          cat curl_output_1.txt
          curl -H "Accept: application/json" http://backend-spring-app.com/spring-app/resource-accepted -o curl_output_2.txt
          cat curl_output_2.txt

      - name: Check rollout status
        id: rollout-status
        run: |
          STATUS=$(kubectl get rollout backend-spring-app-spring-app -o jsonpath='{.status.conditions[?(@.type=="Progressing")].reason}')
          echo "status=$STATUS" >> $GITHUB_ENV

      - name: Rollback if degraded
        if: env.status == 'ProgressDeadlineExceeded'
        run: |
          kubectl argo rollouts undo backend-spring-app-spring-app --namespace=spring-app
          sleep 30

      # Step to print the rollout status.
      # This step checks and prints the status of the rollout to verify if the rollback was successful.
      - name: Print Rollout Status
        run: kubectl argo rollouts get rollout backend-spring-app-spring-app --namespace=spring-app
