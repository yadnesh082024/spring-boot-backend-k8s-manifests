apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: endpoint-tests
  namespace: spring-app
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: backend-spring-app
    meta.helm.sh/release-namespace: spring-app
spec:
  metrics:
    - name: endpoint-test
      provider:
        job:
          spec:
            ttlSecondsAfterFinished: 300  # Job will be deleted 5 minutes after finishing
            backoffLimit: 3
            activeDeadlineSeconds: 150  # Set the time in seconds before which the job should not end
            template:
              metadata:
                labels:
                  app: endpoint-tester
              spec:
                securityContext:
                  runAsUser: 0  # Run as root
                containers:
                  - name: curl-container
                    image: curlimages/curl:latest
                    command: ["sh", "-c"]
                    args:
                      - |
                        set -e
                        echo "Updating /etc/hosts..."
                        echo "4.224.90.31 backend-spring-app.com" >> /etc/hosts
                        echo "Updated /etc/hosts with backend-spring-app.com"

                        echo "Checking /etc/hosts..."
                        cat /etc/hosts

                        # Install jq
                        echo "Installing jq..."
                        apk add --no-cache jq

                        # Test if the hostname resolves correctly
                        echo "Testing backend-spring-app.com resolution..."
                        resolved_ip=$(getent hosts backend-spring-app.com | awk '{ print $1 }')
                        echo "Resolved IP: $resolved_ip"

                        # Directly test the endpoint with headers
                        echo "Directly testing the endpoint..."
                        endpoint_response=$(curl -fs -H "Accept: application/json" "http://backend-spring-app.com/spring-app/")
                        echo "Endpoint Response: $endpoint_response"

                        # Check if the response is empty
                        if [ -z "$endpoint_response" ]; then
                          echo "Received an empty response body from http://backend-spring-app.com/spring-app/"
                        fi

                        # Check the expected responses
                        check_endpoint() {
                          expected_status="$1"
                          expected_message="$2"
                          url="$3"

                          # Get the response directly
                          response=$(curl -fs "$url" || echo "Curl failed")

                          echo "Response: $response"

                          # Extract status and message from the response
                          actual_status=$(echo "$response" | jq -r '.status')
                          actual_message=$(echo "$response" | jq -r '.message')
                          actual_podName=$(echo "$response" | jq -r '.podName')
                          actual_imageName=$(echo "$response" | jq -r '.imageName')

                          # Check if the status and message match the expected values
                          if [ "$actual_status" != "$expected_status" ] || [ "$actual_message" != "$expected_message" ]; then
                            echo "Test failed for $url: Expected status '$expected_status' and message '$expected_message' but got status '$actual_status' and message '$actual_message'"
                            exit 1  # Fail the job
                          fi

                          # Check if podName and imageName exist
                          if [ -z "$actual_podName" ] || [ -z "$actual_imageName" ]; then
                            echo "Test failed for $url: podName or imageName is missing"
                            exit 1  # Fail the job
                          fi

                          echo "Test passed for $url: Received expected status '$actual_status' and message '$actual_message'"
                        }

                        echo "Testing additional endpoints..."
                        check_endpoint "200" "WELCOME" "http://backend-spring-app.com/spring-app/"
                        check_endpoint "201" "CREATED" "http://backend-spring-app.com/spring-app/resource-created"
                        check_endpoint "202" "ACCEPTED" "http://backend-spring-app.com/spring-app/resource-accepted"
                        #check_endpoint "406" "NOT_ACCEPTABLE" "http://backend-spring-app.com/spring-app/resource-not-acceptable"
                        #check_endpoint "501" "NOT_IMPLEMENTED" "http://backend-spring-app.com/spring-app/resource-not-implemented"
                        
                        echo "All tests completed."
                restartPolicy: Never
